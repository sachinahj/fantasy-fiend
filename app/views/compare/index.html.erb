<div class="pie_selector">stat</div>
<div id="pie" style="min-width: 310px; max-width: 800px; height: 400px; margin: 0"></div>
<br>
<div id="x_select" class="scatter_selector">stat</div>
<div id="y_select" class="scatter_selector">fpoints</div>
<div id="scatter" style="min-width: 310px; max-width: 800px; height: 400px; margin: 0"></div>
<br>
<div class="spline_selector">fpoints</div>
<div id="spline" style="min-width: 310px; max-width: 800px; height: 400px; margin: 0"></div>
<br>
<div class="stacked_selector">stat</div>
<div id="stacked" style="min-width: 310px; max-width: 800px; height: 400px; margin: 0"></div>

<script type="text/javascript">

  $(document).ready(function () {

    // ---- axis switch for scatter series ----
    var scatter_season = 2014;
    var scatter_stat = "odp";
    $(document).on('click', '.scatter_selector', function () {

      var switching = $(this).prop('id');
      if (switching === "y_select"){
        if (scatter_season === 2014) {
          scatter_season = 2013;
        } else {
          scatter_season = 2014;
        }
      } else {
        if (scatter_stat === "odp") {
          scatter_stat = "rank";
        } else {
          scatter_stat = "odp";
        }
      }

      if (scatter_season === 2014 && scatter_stat === "odp"){
        ScatterChart(scatter_info_2014_odp);
      } else if (scatter_season === 2014 && scatter_stat === "rank") {
        ScatterChart(scatter_info_2014_rank);
      } else if (scatter_season === 2013 && scatter_stat === "odp") {
        ScatterChart(scatter_info_2013_odp);
      } else {
        ScatterChart(scatter_info_2013_rank);
      }

    });

    // ---- axis switch for stacked series ----
    var stacked_stat = "odp";
    $(document).on('click', '.stacked_selector', function () {

      if (stacked_stat === "odp") {
        stacked_stat = "rank";
      } else {
        stacked_stat = "odp";
      }

      if (stacked_stat === "odp"){
        StackedChart(stacked_info_odp);
      } else {
        StackedChart(stacked_info_rank);
      }

    });

    // ---- axis switch for stacked series ----
    var pie_stat = "odp";
    $(document).on('click', '.pie_selector', function () {

      if (pie_stat === "odp") {
        pie_stat = "rank";
      } else {
        pie_stat = "odp";
      }

      if (pie_stat === "odp"){
        PieChart(pie_info_odp);
      } else {
        PieChart(pie_info_rank);
      }

    });

    // ---- axis switch for spline series ----
    var spline_season = 2014;
    $(document).on('click', '.spline_selector', function () {

      if (spline_season === 2014) {
        spline_season = 2013;
      } else {
        spline_season = 2014;
      }

      if (spline_season === 2014){
        SplineChart(spline_info_2014);
      } else {
        SplineChart(spline_info_2013);
      }

    });


    // ------- raw json data from backend server ---------
    var qbs = <%= raw @quarterbacks.to_json(include: [:season_projection, :season_stat]) %>; 
    var rbs = <%= raw @runningbacks.to_json(include: [:season_projection, :season_stat]) %>; 
    var wrs = <%= raw @receivers.to_json(include: [:season_projection, :season_stat]) %>; 
    var tes = <%= raw @tightends.to_json(include: [:season_projection, :season_stat]) %>;
    var ks = <%= raw @kickers.to_json(include: [:season_projection, :season_stat]) %>;
    var dsts = <%= raw @defenses.to_json(include: [:season_projection, :season_stat]) %>;


    // ------- creation of scatter data ---------
    var qb_scatter = CreatePositionScatterSeries(qbs, "Quarterbacks", "red", 2014, "odp");
    var rb_scatter = CreatePositionScatterSeries(rbs, "Running Backs", "orange", 2014, "odp");
    var wr_scatter = CreatePositionScatterSeries(wrs, "Receivers", "green", 2014, "odp");
    var te_scatter = CreatePositionScatterSeries(tes, "Tight Ends", "blue", 2014, "odp");
    var k_scatter = CreatePositionScatterSeries(ks, "Kickers", "purple", 2014, "odp");
    var scatter_series_2014_odp = [qb_scatter, rb_scatter, wr_scatter, te_scatter, k_scatter];
    var qb_scatter = CreatePositionScatterSeries(qbs, "Quarterbacks", "red", 2014, "rank");
    var rb_scatter = CreatePositionScatterSeries(rbs, "Running Backs", "orange", 2014, "rank");
    var wr_scatter = CreatePositionScatterSeries(wrs, "Receivers", "green", 2014, "rank");
    var te_scatter = CreatePositionScatterSeries(tes, "Tight Ends", "blue", 2014, "rank");
    var k_scatter = CreatePositionScatterSeries(ks, "Kickers", "purple", 2014, "rank");
    var scatter_series_2014_rank = [qb_scatter, rb_scatter, wr_scatter, te_scatter, k_scatter];
    var qb_scatter = CreatePositionScatterSeries(qbs, "Quarterbacks", "red", 2013, "odp");
    var rb_scatter = CreatePositionScatterSeries(rbs, "Running Backs", "orange", 2013, "odp");
    var wr_scatter = CreatePositionScatterSeries(wrs, "Receivers", "green", 2013, "odp");
    var te_scatter = CreatePositionScatterSeries(tes, "Tight Ends", "blue", 2013, "odp");
    var k_scatter = CreatePositionScatterSeries(ks, "Kickers", "purple", 2013, "odp");
    var scatter_series_2013_odp = [qb_scatter, rb_scatter, wr_scatter, te_scatter, k_scatter];
    var qb_scatter = CreatePositionScatterSeries(qbs, "Quarterbacks", "red", 2013, "rank");
    var rb_scatter = CreatePositionScatterSeries(rbs, "Running Backs", "orange", 2013, "rank");
    var wr_scatter = CreatePositionScatterSeries(wrs, "Receivers", "green", 2013, "rank");
    var te_scatter = CreatePositionScatterSeries(tes, "Tight Ends", "blue", 2013, "rank");
    var k_scatter = CreatePositionScatterSeries(ks, "Kickers", "purple", 2013, "rank");
    var scatter_series_2013_rank = [qb_scatter, rb_scatter, wr_scatter, te_scatter, k_scatter];
    
    var scatter_info_2014_odp = {
      scatter_series: scatter_series_2014_odp,
      title: "Projected Fantasy Points vs. Projected Overall Draft Pick",
      x_axis: "Projected Overall Draft Pick",
      y_axis: "Projected Fantasy Points"
    };
    var scatter_info_2014_rank = {
      scatter_series: scatter_series_2014_rank,
      title: "Projected Fantasy Points vs. Rank",
      x_axis: "Rank",
      y_axis: "Projected Fantasy Points"
    };
    var scatter_info_2013_odp = {
      scatter_series: scatter_series_2013_odp,
      title: "'13 Fantasy Points vs. Projected Overall Draft Pick",
      x_axis: "Projected Overall Draft Pick",
      y_axis: "'13 Fantasy Points"
    };
    var scatter_info_2013_rank = {
      scatter_series: scatter_series_2013_rank,
      title: "'13 Fantasy Points vs. Rank",
      x_axis: "Rank",
      y_axis: "'13 Fantasy Points"
    };
    
    
    // ------ creation of stacked data ----------
    var qb_stacked = CreatePositionStackedSeries(qbs, "Quarterbacks", "red", "odp");
    var rb_stacked = CreatePositionStackedSeries(rbs, "Running Backs", "orange", "odp");
    var wr_stacked = CreatePositionStackedSeries(wrs, "Receivers", "green", "odp");
    var te_stacked = CreatePositionStackedSeries(tes, "Tight Ends", "blue", "odp");
    var k_stacked = CreatePositionStackedSeries(ks, "Kickers", "purple", "odp");
    var stacked_series_odp = [qb_stacked, rb_stacked, wr_stacked, te_stacked, k_stacked];

    var qb_stacked = CreatePositionStackedSeries(qbs, "Quarterbacks", "red", "rank");
    var rb_stacked = CreatePositionStackedSeries(rbs, "Running Backs", "orange", "rank");
    var wr_stacked = CreatePositionStackedSeries(wrs, "Receivers", "green", "rank");
    var te_stacked = CreatePositionStackedSeries(tes, "Tight Ends", "blue", "rank");
    var k_stacked = CreatePositionStackedSeries(ks, "Kickers", "purple", "rank");
    var stacked_series_rank = [qb_stacked, rb_stacked, wr_stacked, te_stacked, k_stacked];

    var stacked_info_odp = {
      stacked_series: stacked_series_odp,
      title: "Projected Overall Draft Picks Breakdown by Position",
      x_axis: "Projected Overall Draft Picks"
    };
    var stacked_info_rank = {
      stacked_series: stacked_series_rank,
      title: "Ranks Breakdown by Position",
      x_axis: "Ranks"
    };

    // ------ creation of pie data ----------
    var qb_count = CreatePositionPieData(qbs, "odp");
    var rb_count = CreatePositionPieData(rbs, "odp");
    var wr_count = CreatePositionPieData(wrs, "odp");
    var te_count = CreatePositionPieData(tes, "odp");
    var total_count = qb_count + rb_count + wr_count + te_count;
    var pie_data_odp = [
      {name: 'Quarterbacks', color: 'red', y: qb_count/total_count * 100},
      {name: 'Running Backs', color: 'yellow', y: rb_count/total_count * 100, sliced: true, selected: true},
      {name: 'Wide Receivers', color: 'green', y: wr_count/total_count * 100},
      {name: 'Tight Ends', color: 'blue', y: te_count/total_count * 100}
    ];
    var pie_info_odp = {
      title: "Top 30 Projected Overall Draft Picks by Position",
      pie_data: pie_data_odp
    };

    var qb_count = CreatePositionPieData(qbs, "rank");
    var rb_count = CreatePositionPieData(rbs, "rank");
    var wr_count = CreatePositionPieData(wrs, "rank");
    var te_count = CreatePositionPieData(tes, "rank");
    var total_count = qb_count + rb_count + wr_count + te_count;
    var pie_data_rank = [
      {name: 'Quarterbacks', color: 'red', y: qb_count/total_count * 100},
      {name: 'Running Backs', color: 'yellow', y: rb_count/total_count * 100, sliced: true, selected: true},
      {name: 'Wide Receivers', color: 'green', y: wr_count/total_count * 100},
      {name: 'Tight Ends', color: 'blue', y: te_count/total_count * 100}
    ];
    var pie_info_rank = {
      title: "Top 30 Ranked by Position",
      pie_data: pie_data_rank
    };

    // ------ creation of spline data ----------
    var qb_spline = CreatePositionSplineData(qbs, 'Quarterbacks', 'red', 2014);
    var rb_spline = CreatePositionSplineData(rbs, 'Running Backs', 'yellow', 2014)
    var wr_spline = CreatePositionSplineData(wrs, 'Wide Receivers', 'green', 2014)
    var te_spline = CreatePositionSplineData(tes, 'Tight Ends', 'blue', 2014)
    var k_spline = CreatePositionSplineData(ks, 'Kickers', 'purple', 2014)
    var spline_series_2014 = [qb_spline, rb_spline, wr_spline, te_spline, k_spline];
    var qb_spline = CreatePositionSplineData(qbs, 'Quarterbacks', 'red', 2013);
    var rb_spline = CreatePositionSplineData(rbs, 'Running Backs', 'yellow', 2013)
    var wr_spline = CreatePositionSplineData(wrs, 'Wide Receivers', 'green', 2013)
    var te_spline = CreatePositionSplineData(tes, 'Tight Ends', 'blue', 2013)
    var k_spline = CreatePositionSplineData(ks, 'Kickers', 'purple', 2013)
    var spline_series_2013 = [qb_spline, rb_spline, wr_spline, te_spline, k_spline];


    var spline_info_2014 = {
      spline_series: spline_series_2014,
      title: "Projected Point Drop Off Relative to #1 Projected Player",
      x_axis: "Projected Fantasy Points Rank"
    };
    var spline_info_2013 = {
      spline_series: spline_series_2013,
      title: "'13 Fantasy Point Drop Off Relative to #1 Scoring Player",
      x_axis: "'13 Fantasy Points Rank"
    };


    // ---- initialize charts ----
    ScatterChart(scatter_info_2014_odp);
    StackedChart(stacked_info_odp);
    PieChart(pie_info_odp);
    SplineChart(spline_info_2014);

    // ------- series and data create functions for charts
    function CreatePositionScatterSeries(positionJSON, name, color, fp_season, chosen_stat) {
      var season = "season_projection";
      var stat = "overall_draft_position";
      if (fp_season === 2013) {
        season = "season_stat";
      }
      if (chosen_stat === "rank") {
        stat = "overall_rank";
      }
      var position_series = []
      for (var position in positionJSON) {
        if (positionJSON[position][stat] && positionJSON[position][season]) {
          position_series.push({name: positionJSON[position].display_name+" ("+positionJSON[position].team_abbreviation+")", color: color, x: positionJSON[position][stat], y: positionJSON[position][season].fantasy_points});
        }
      }
      return {name: name, data: position_series, color: color}
    }

    function CreatePositionStackedSeries(positionJSON, name, color, chosen_stat) {
      var stat = "overall_draft_position";
      if (chosen_stat === "rank") {
        stat = "overall_rank";
      }

      var position_data = [0,0,0,0,0,0,0,0,0,0];
      for (var position = 0; position < positionJSON.length; position++) {
        odp = positionJSON[position][stat]

        if (odp == null || odp === 0) {
          continue;
        }

        if (odp <= 25) {
          position_data[0] += 1;
        } else if (odp <= 50){
          position_data[1] += 1;
        } else if (odp <= 75){
          position_data[2] += 1;
        } else if (odp <= 100){
          position_data[3] += 1;
        } else if (odp <= 125){
          position_data[4] += 1;
        } else if (odp <= 150){
          position_data[5] += 1;
        } else if (odp <= 175){
          position_data[6] += 1;
        } else if (odp <= 200){
          position_data[7] += 1;
        } else if (odp <= 225){
          position_data[8] += 1;
        } else if (odp <= 250){
          position_data[9] += 1;
        }
      }

      return {name: name, data: position_data, color: color}
    }

    function CreatePositionPieData(positionJSON, chosen_stat) { 
      var stat = "overall_draft_position";
      if (chosen_stat === "rank") {
        stat = "overall_rank";
      }

      var position_count = 0;
      for (position in positionJSON) {
        if (positionJSON[position][stat] <= 30){
          position_count += 1;
        }
      }
      return position_count;
    }

    function CreatePositionSplineData (positionJSON, name, color, fp_season) {
      var season = "season_projection";
      if (fp_season === 2013) {
        season = "season_stat";
      }

      var position_high = 0
      for (var player = 0; player < positionJSON.length; player++) {
        if (positionJSON[player][season]){
          if (positionJSON[player][season].fantasy_points > position_high) {
            position_high = positionJSON[player][season].fantasy_points;
          }
        }
      }

      var position_data = [];
      for (position in positionJSON) {
        var fp = 0
        if (positionJSON[position][season]) {fp = positionJSON[position][season].fantasy_points;}
        if (fp !== null && fp !== 0){
          position_data.push(parseFloat((position_high - fp).toFixed(2)));
        }
      }
      position_data.sort(function(a, b){return a-b});
      position_data = position_data.slice(0,20);
      return {name: name, data: position_data, color: color}
    }

    // ------- chart functions ----------
    function ScatterChart (scatter_info) {
      $('#scatter').highcharts({
        chart: {
          type: 'scatter',
          zoomType: 'xy'
        },
        title: {
          text: scatter_info.title
        },
        subtitle: {
          text: 'Source: FantasyPros.com'
        },
        xAxis: {
          title: {
            enabled: true,
            text: scatter_info.x_axis
          },
          startOnTick: true,
          endOnTick: true,
          showLastLabel: true,
          min: 0
        },
        yAxis: {
          title: {
            text: scatter_info.y_axis
          },
          min: 0
        },
        legend: {
          enabled: true
        },
        plotOptions: {
          scatter: {
            marker: {
              radius: 5,
              states: {
                hover: {
                  enabled: true,
                  lineColor: 'rgb(100,100,100)'
                }
              }
            },
            states: {
              hover: {
                marker: {
                  enabled: false
                }
              }
            },
            tooltip: {
              pointFormat: '<b>{point.name}</b><br>{point.x} ' + scatter_info.x_axis.toLowerCase() + ', {point.y} ' + scatter_info.y_axis.toLowerCase()
            }
          }
        },
        series: scatter_info.scatter_series
      });
    }

    function StackedChart (stacked_info) {
      $('#stacked').highcharts({
        chart: {
          type: 'column'
        },
        title: {
          text: stacked_info.title
        },
        subtitle: {
          text: 'Source: FantasyPros.com'
        },
        xAxis: {
          categories: ['1-10%', '11-20%', '21-30%', '31-40%', '41-50%', '51-60%', '61-70%', '71-80%', '81-90%', '91-100%'],
          title : {
            text: stacked_info.x_axis
          }
        },
        yAxis: {
          min: 0,
          title: {
            text: 'Total Players'
          },
          stackLabels: {
            enabled: false,
            style: {
              fontWeight: 'bold',
              color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
            }
          }
        },
        legend: {
          align: 'right',
          x: 0,
          verticalAlign: 'top',
          y: 50,
          floating: true,
          backgroundColor: (Highcharts.theme && Highcharts.theme.background2) || 'white',
          borderColor: '#CCC',
          borderWidth: 1,
          shadow: false
        },
        tooltip: {
          formatter: function() {
            if (this.y === 0){
              return;
            }
            return '<b>'+ this.x +'</b><br/>'+
              this.series.name +': '+ this.y +'<br/>'+
              'Total: '+ this.point.stackTotal;
          }
        },
        plotOptions: {
          column: {
            stacking: 'normal',
            dataLabels: {
              enabled: false,
              color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white',
              style: {
                textShadow: '0 0 3px black, 0 0 3px black'
              }
            }
          }
        },
        series: stacked_info.stacked_series
      });
    }

    function PieChart (pie_info) {
      $('#pie').highcharts({
        chart: {
          plotBackgroundColor: null,
          plotBorderWidth: null,
          plotShadow: false
        },
        title: {
          text: pie_info.title
        },
        subtitle: {
          text: 'Source: FantasyPros.com'
        },
        tooltip: {
          pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
        },
        plotOptions: {
          pie: {
            allowPointSelect: true,
            cursor: 'pointer',
            dataLabels: {
              enabled: false
            },
            showInLegend: true
          }
        },
        series: [{
          type: 'pie',
          // name: 'Projection Share',
          data: pie_info.pie_data
        }]
      });
    }

    function SplineChart (spline_info) {
      $('#spline').highcharts({
        chart: {
          type: 'spline'
        },
        title: {
          text: spline_info.title
        },
        subtitle: {
          text: 'Source: FantasyPros.com'
        },
        xAxis: {
          categories: [
            '1', '2', '3', '4', '5',
            '6', '7', '8', '9', '10',
            '11', '12', '13', '14', '15',
            '16', '17', '18', '19', '20' 
          ],
          title: {
            text: spline_info.x_axis
          }
        },
        yAxis: {
          title: {
            text: 'Points Differental'
          },
          labels: {
            formatter: function() {
              return this.value
            }
          },
          // min: 0
        },
        tooltip: {
          crosshairs: true,
          shared: true
        },
        plotOptions: {
          spline: {
            marker: {
              radius: 4,
              lineColor: '#666666',
              lineWidth: 1
            }
          }
        },
        series: spline_info.spline_series
      });
    }

    // --- end of document.ready ---
  });
</script>