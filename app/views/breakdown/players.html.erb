<div class="col-sm-4 col-md-3 playersSidebarNav" id="sidebarNav">

  <div class="row-fluid">
    <div class="col-sm-4 col-med-4 chartsButtonContainer">
      <button type="button" id="projections" class="btn chartsButtons btn-info">'14 Projections</button>
    </div>
    <div class="col-sm-4 col-med-4 chartsButtonContainer">
      <button type="button" id="stats" class="btn chartsButtons btn-default">'13 Stats</button>
    </div>
    <div class="col-sm-4 col-med-4 chartsButtonContainer">
      <button type="button" id="snaps" class="btn chartsButtons btn-default">'13 Snaps</button>
    </div>
  </div>


  <div class="row-fluid">
    <div class="col-sm-2 col-med-2 playersButtonContainer">
      <button type="button" id="QB" class="btn playersButtons btn-success">QBs</button>
    </div>
    <div class="col-sm-2 col-med-2 playersButtonContainer">
      <button type="button" id="RB" class="btn playersButtons btn-success">RBs</button>
    </div>
    <div class="col-sm-2 col-med-2 playersButtonContainer">
      <button type="button" id="WR" class="btn playersButtons btn-success">WRs</button>
    </div>
    <div class="col-sm-2 col-med-2 playersButtonContainer">
      <button type="button" id="TE" class="btn playersButtons btn-success">TEs</button>
    </div>
    <div class="col-sm-2 col-med-2 playersButtonContainer">
    </div>
    <div class="col-sm-2 col-med-2 playersButtonContainer">
      <button type="button" id="ALL" class="btn playersButtons btn-success">All</button>
    </div>
  </div>

  <div class="row-fluid">
          <div class="select-container text-center">
            <select id ="labSelectBox" style="width:90%">
              <option></option>
              <optgroup label="Quarterbacks" class="QB">
                <% @quarterbacks.each do |qb| %>
                  <option value = "<%= qb.id %>"><%= qb.display_name %></option>
                <% end %>
              </optgroup>
              <optgroup label="Running Backs" class="RB">
                <% @runningbacks.each do |rb| %>
                  <option value = "<%= rb.id %>"><%= rb.display_name %></option>
                <% end %>
              </optgroup>
              <optgroup label="Wide Receivers" class="WR">
                <% @receivers.each do |wr| %>
                  <option value = "<%= wr.id %>"><%= wr.display_name %></option>
                <% end %>
              </optgroup>
              <optgroup label="Tight Ends" class="TE">
                <% @tightends.each do |te| %>
                  <option value = "<%= te.id %>"><%= te.display_name %></option>
                <% end %>
              </optgroup>
              <optgroup label="Other" class="Other">
                <% @others.each do |other| %>
                  <option value = "<%= other.id %>"><%= other.display_name %></option>
                <% end %>
              </optgroup>
            </select>
          </div>
  </div>
  <br>

  <div class="row-fluid">
    <div class="col-sm-12 col-med-12">
      <span id="selectedText">
        <!-- selected players -->
      </span>
    </div>
  </div>

</div>


<div class="col-sm-8 col-sm-offset-4 col-md-9 col-md-offset-3 playerBreakdownMain" id="main">
<br><br>
  <div class="row-fluid projectionsChartContainer labChartContainer">
      <div id="projectionsChart" class="labChart"></div>
  </div>
  <div class="row-fluid statsChartContainer labChartContainer" style="display:none">
      <div id="statsChart" class="labChart"></div>
  </div>
  <div class="row-fluid snapsChartContainer labChartContainer" style="display:none">
      <div id="snapsChart" class="labChart"></div>
  </div>
  </div>

</div>


<script type="text/javascript">
  
  $(document).ready(function () {

    // ---- get data from backend server ---
    var qbs = <%= raw @quarterbacks.to_json(include: :season_projection) %>; 
    var rbs = <%= raw @runningbacks.to_json(include: :season_projection) %>; 
    var wrs = <%= raw @receivers.to_json(include: :season_projection) %>; 
    var tes = <%= raw @tightends.to_json(include: :season_projection) %>;
    var ks = <%= raw @kickers.to_json(include: :season_projection) %>;
    var dsts = <%= raw @defenses.to_json(include: :season_projection) %>;






    $('.btn.chartsButtons').on("click", function () {
      type = $(this).attr("id");
      $('.chartsButtons').removeClass('btn-info');
      $('.chartsButtons').addClass('btn-default');
      $(this).addClass('btn-info');


      $('.labChartContainer').hide();
      $('.' + type + 'ChartContainer').show();

    });




    // position selector buttons 
    $('.btn.playersButtons').on("click", function () {

      position = $(this).attr("id");
      // $('.'+position).fadeToggle();

      if ($(this).hasClass('btn-success')) {

        $(this).removeClass('btn-success');
        $(this).addClass('btn-danger');

      } else {

        $(this).addClass('btn-success');
        $(this).removeClass('btn-danger');

      }
      RenderSelectBox();
    });


    // ---- select all functionality ---
    // select all functionality
    $('.btn.playersButtons').on("click",function () {
      // check if all button was pressed 
      if ($(this).prop('id') === "ALL") {
        // check if all button is sucess 
        if ($(this).hasClass('btn-success')){
          // make all buttons success 
          $('.btn.playersButtons').each(function () {
            $(this).removeClass('btn-danger');
            $(this).addClass('btn-success');
          });

        } else {
          // all buttons danger 
          $('.btn.playersButtons').each(function () {
            $(this).removeClass('btn-success');
            $(this).addClass('btn-danger');
          });

        }

      }
      RenderSelectBox();
    });

    // ---- render select box with appropiate positions ----
    function RenderSelectBox () {
      html = '<select id ="labSelectBox" style="width : 90%"><option></option>';
      
      if ($('.playersButtons#QB').hasClass('btn-success')){
        html += PositionOptGroup('Quarterbacks', qbs);
      }
      if ($('.playersButtons#RB').hasClass('btn-success')){
        html += PositionOptGroup('Running Backs', rbs);
      }
      if ($('.playersButtons#WR').hasClass('btn-success')){
        html += PositionOptGroup('Wide Receivers', wrs);
      }
      if ($('.playersButtons#TE').hasClass('btn-success')){
        html += PositionOptGroup('Tight Ends', tes);
      }
      html += "</select>";
      console.log("html", html);
      $('.select-container').empty().append(html);
      $('#labSelectBox').select2('destroy').select2({
        placeholder: "Select a Player",
        allowClear: true
      });
    }

    // ---- create html of each position players for render funcation --- 
    function PositionOptGroup (label, positionJSON){
      html = '<optgroup label="' + label + '" class="QB">';
      for (position in positionJSON){
        option_html = '<option value = "' + positionJSON[position].id + '">' + positionJSON[position].display_name + '</option>';
        html += option_html;
      }
      html += '</optgroup>';
      return html;
    }
    
    // ---- initialize select box on startup
    $('#labSelectBox').select2({
      placeholder: "Select a Player",
      allowClear: true
    });

    // ---- event listener for change on select box ----
    // ---- add player to view and to ids array ---
    $(document).on('change','#labSelectBox', function() {
      amount = $('span#delete').length
      if (amount < 5){
        var theID = $('#labSelectBox').select2('data').id
        if (ids.indexOf(parseInt(theID)) > -1) {
          return;
        }



        var player = GetData(theID);
        var html = '<div id="player">' + 
          '<div id="delete_tag"> x </div>' + 
          '<p id="player_info_header">' + 
          '<a target="_blank" data-id="' + player.id + '" href="/players/'+player.id +'">' + player.display_name + '</a>' +
          ' (' + player.position + ')</p>' + 
          '<ul>' +
          '<li><b>Team</b>: ' + player.team_abbreviation + ' (bye: ' + player.bye_week + ')</li>';
        if (player.overall_rank) {
          html += '<li><b>Overall Rank</b>: ' + player.overall_rank + '</li>';
        }
        if (player.depth_chart_position) {
          html += '<li><b>Depth Chart</b>: ' + player.depth_chart_position + '</li>'
        }
        if (player.season_projection) {
          switch (player.position){
            case 'QB':
              html += '<li><b>SOS Rank</b>: ' + player.season_projection.sos_qb_rank + '</li>'
              html += '<li><b>SOS FPA</b>: ' + player.season_projection.sos_qb_fpa + '</li>'
              break;
            case 'RB':
              html += '<li><b>SOS Rank</b>: ' + player.season_projection.sos_rb_rank + '</li>'
              html += '<li><b>SOS FPA</b>: ' + player.season_projection.sos_rb_fpa + '</li>'
              break;
            case 'WR':
              html += '<li><b>SOS Rank</b>: ' + player.season_projection.sos_wr_rank + '</li>'
              html += '<li><b>SOS FPA</b>: ' + player.season_projection.sos_wr_fpa + '</li>'
              break;
            case 'TE':
              html += '<li><b>SOS Rank</b>: ' + player.season_projection.sos_te_rank + '</li>'
              html += '<li><b>SOS FPA</b>: ' + player.season_projection.sos_te_fpa + '</li>'
              break;
            default:
              console.log("defaulted switch statment in select#change listener");
          }
        }
        html +=  '</ul></div>'


        $('#selectedText').append(html);
        AddID(parseInt(theID));
        Render();
      }
    });

    // ---- delete event listener to remove player from view and ids array ----
    $('#selectedText').on('click','#delete_tag', function () {
      id = $(this).parent().find('a').data('id')
      $(this).parent().remove();
      DeleteID(id);
      Render();
    });


    // ---- ids array and all players data from backend ----
    var ids = [];
    var all_players = <%= raw @players.to_json(include: [:season_projection, :season_stat]) %>;

    // --- adds id to ids array ---
    function AddID(id){
      ids.push(id);
      return true;
    }
    // --- deletes id to ids array ---
    function DeleteID(id) {
      var index = ids.indexOf(id);
      if (index > -1) {
        ids.splice(index,1);
      }
    };

    // --- returns individual player data form player id --- 
    function GetData(id) {
      for (var player in all_players){
        if (all_players[player].id == id){
          return all_players[player];
        }
      }
    };

    // --- return data of all players in ids array
    function create_data () {
      players = [];
      for (var id in ids){
        player = GetData(ids[id])
        players.push(player);
      }
      return players
    }

    // --- determines which categories should be used in each chart
    function which_data(players) {
      
      // ----- Split info into 3 different categories (projections, stats, snaps) ------------------
      var info = [];
      for (key in players[0]){
        if (key === 'season_stat' || key === 'season_projection' || key.indexOf('created') > -1 || key.indexOf('updated') > -1 || key.indexOf('id') > -1){
        } else {
          info.push(key);
        }
      }

      var season_stats_snaps  = [];
      var season_stats = [];
      for (key in players[0].season_stat){
        if (
          key.indexOf('created') > -1 ||
          key.indexOf('updated') > -1 || 
          key.indexOf('id') > -1 ||
          key.indexOf('year') > -1 ||
          key.indexOf('fpa_') > -1 ||
          key.indexOf('defense_') > -1 ||
          key.indexOf('field_goals_') > -1 ||
          key.indexOf('extra_points_') > -1 

        ) {}
        else if (key.indexOf("snap_") > -1){
          season_stats_snaps.push(key);
        } else {
          season_stats.push(key);
        }
      }

      var season_projections = [];
      for (key in players[0].season_projection){

        if (
          key.indexOf('created') > -1 ||
          key.indexOf('updated') > -1 ||
          key.indexOf('id') > -1 ||
          key.indexOf('year') > -1 ||
          key.indexOf('sos_') > -1 ||
          key.indexOf('field_goals_') > -1 ||
          key.indexOf('extra_points_') > -1 
        ) {}
        else {
          season_projections.push(key);
        }
      }

      // ------- Determine which categories are used by less than 50% and set to NULL ---------
      for (var i = 0; i < info.length; i++) {
        count = 0;
        total_count = players.length
        for (var j = 0; j < total_count; j++) {
          if (players[j][info[i]] === null || players[j][info[i]] < 1) {
             count += 1;
          }
        }
        if (parseFloat(count/total_count) > 0.5) {
          info[i] = null;
        }
      }

      for (var i = 0; i < season_stats.length; i++) {
        count = 0;
        total_count = players.length
        for (var j = 0; j < total_count; j++) {
          if(players[j]["season_stat"]){
            if (players[j]["season_stat"][season_stats[i]] === null || players[j]["season_stat"][season_stats[i]] < 1) {
               count += 1;
            }
          }
        }
        if (parseFloat(count/total_count) > 0.5) {
          season_stats[i] = null;
        }
      }

      for (var i = 0; i < season_stats_snaps.length; i++) {
        count = 0;
        total_count = players.length
        for (var j = 0; j < total_count; j++) {
          if(players[j]["season_stat"]){
            if (players[j]["season_stat"][season_stats_snaps[i]] === null || players[j]["season_stat"][season_stats_snaps[i]] < 1) {
               count += 1;
            }
          }
        }
        if (parseFloat(count/total_count) > 0.5) {
          season_stats_snaps[i] = null;
        }
      }

      for (var i = 0; i < season_projections.length; i++) {
        count = 0;
        total_count = players.length
        for (var j = 0; j < total_count; j++) {
          if(players[j]["season_projection"]){
            if (players[j]["season_projection"][season_projections[i]] === null || players[j]["season_projection"][season_projections[i]] < 1) {
               count += 1;
            }
          }
        }
        if (parseFloat(count/total_count) > 0.5) {
          season_projections[i] = null;
        }
      }
   
      // -------- Remove NULL values from categories -----------
      function RemoveNull (categories) {
        for (var i = 0; i < categories.length; i++) {
          if (categories[i] == undefined) {         
            categories.splice(i, 1);
            i--;
          }
        }  
        return categories;      
      }

      info = RemoveNull(info)
      season_stats = RemoveNull(season_stats)
      season_stats_snaps = RemoveNull(season_stats_snaps)
      season_projections = RemoveNull(season_projections)
      
      //  ------- Return object of categoreis ------------
      return {
        'info': info,
        'season_stats': season_stats,
        'season_stats_snaps': season_stats_snaps,
        'season_projections': season_projections
      }
    }

    function log10(val) {
      return Math.log(val) / Math.LN10;
    }
    function CategoryDisplayMaker (categories) {

      var translator = {
        pass_completions: "Passing Completions",
        pass_attempts: "Passing Attempts",
        pass_completion_percent: "Passing Completion Percent",
        pass_yards: "Passsing Yards",
        pass_yards_per_attempt: "Passing Yards per Attempt", 
        pass_touchdowns: "Passing Touchdowns",
        pass_interceptions: "Interceptions",
        qb_rating: "QB Rating",
        rush_attempts: "Rushing Attempts",
        rush_yards: "Rushing Yards",
        rush_yards_per_attempt: "Rushing Yards per Attempt",
        rush_touchdowns: "Rushing Touchdowns",
        receive_targets: "Receiving Targets",
        receive_receptions: "Receiving Receptions",
        receive_yards: "Receiving Yards",
        receive_touchdowns: "Receiving Touchdowns",
        receive_completion_percent: "Receiving Completion Percent",
        receive_long: "Receiving Long",
        receive_yards_per_target: "Receiving Yards per Target",
        receive_yards_per_reception: "Receiving Yards per Reception",
        fumbles: "Fumbles",
        fumbles_lost: "Fumbles Lost",
        fantasy_points: "Fantasy Points",
        fantasy_points_per_week: "Fantasy Points per Week",
        snap_games_played: "Games Played",
        snap_snaps: "Snaps Played",
        snap_snaps_per_game: "Snaps Played per Game",
        snap_percent: "Snaps Played Percent",
        snap_rush_percent: "Rush Snap Percent",
        snap_target_percent: "Target Snap Percent",
        snap_reception_percent: "Reception Snap Percent",
        snap_touch_percent: "Touch Snap Percent",
        snap_util_percent: "Intended Touch Snap Percent",
        snap_fantasy_points_percent: "Fantasy Points per Snap Percent"
      };


      categories = $.map(categories, function (category, index) {
        return translator[category];
      });

      return categories;
    }

    // --- function render players data from categories
    function Render () {
      var players = create_data();
      var projections_categories = stats_categories = snaps_categories = projections_series = stats_series = snaps_series = [];

      
      if (players[0] != null) {

        var data = which_data(players);
        
        // ---- create season projections series and categories ---
        var season_projections = data.season_projections
        var projections_categories = season_projections
        var projections_series = []
        for (var i = 0; i < players.length; i++){
          var cat = []
          for (var j = 0; j < season_projections.length; j++) {
            cat.push(log10(players[i]["season_projection"][season_projections[j]]));
          }
          projections_series.push({name: players[i].display_name, data: cat})
        }

        // ---- create season stats series and categories ---
        var season_stats = data.season_stats
        var stats_categories = season_stats
        var stats_series = []
        for (var i = 0; i < players.length; i++){
          var cat = []
          for (var j = 0; j < season_stats.length; j++) {
            cat.push(log10(players[i]["season_stat"][season_stats[j]]));
          }
          stats_series.push({name: players[i].display_name, data: cat})
        }

        // ---- create season stats snaps series and categories ---
        var season_stats_snaps = data.season_stats_snaps
        var snaps_categories = season_stats_snaps
        var snaps_series = []
        for (var i = 0; i < players.length; i++){
          var cat = []
          for (var j = 0; j < season_stats_snaps.length; j++) {
            cat.push(log10(players[i]["season_stat"][season_stats_snaps[j]]));
          }
          snaps_series.push({name: players[i].display_name, data: cat})
        }
        ProjectionsStatsSnapsChart('Projections','projectionsChart', CategoryDisplayMaker(projections_categories), projections_series);
        ProjectionsStatsSnapsChart('Stats','statsChart',CategoryDisplayMaker(stats_categories), stats_series);
        ProjectionsStatsSnapsChart('Snaps','snapsChart',CategoryDisplayMaker(snaps_categories), snaps_series);

        // ProjectionsStatsSnapsChart('Projections','projectionsChart', projections_categories, projections_series);
        // ProjectionsStatsSnapsChart('Stats','statsChart',stats_categories, stats_series);
        // ProjectionsStatsSnapsChart('Snaps','snapsChart',snaps_categories, snaps_series);

      } else {

        $('.labChart').hide();

      }

    }

    // --- function to render projections chart --- 
    function ProjectionsStatsSnapsChart (titleofchart, chart_id, categories, series) {
      categories = typeof categories !== 'undefined' ? categories : [];
      series = typeof series !== 'undefined' ? series : [];

      var width = $('.playerBreakdownMain').width();
      console.log("width", width);

      $('#'+chart_id).show();
      $('#'+chart_id).highcharts({
        chart: {
          type: 'bar',
          width: width
        },
        title: {
          text: titleofchart
        },
        subtitle: {
          text: 'Source: FantasyPros.com and FantasyData.com'
        },
        xAxis: {
          categories: categories,
          title: {
            text: null
          },
        },
        yAxis: {
          // type: 'logarithmic',
          min: 0,
          // max: 1000,
          title: {
            text: titleofchart,
            align: 'high'
          },
          labels: {
            overflow: 'justify',
            formatter: function () {
              return Math.round(Math.pow(10,this.value));
            }
          }
        },
        tooltip: {
          valueSuffix: '',
          formatter: function() {
            return '' + this.series.name + ': ' + Math.round(Math.pow(10,this.y));
          }
        },
        plotOptions: {
          bar: {
            dataLabels: {
              enabled: false,
              formatter: function() {
                   return Math.round(Math.pow(10,this.y)); 
                }
            }
          }
        },
        legend: {
          layout: 'vertical',
          align: 'right',
          verticalAlign: 'top',
          x: 0,
          y: 0,
          floating: true,
          borderWidth: 1,
          backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor || '#FFFFFF'),
          shadow: true
        },
        credits: {
          enabled: false
        },
        series: series
      });

    }
  // --- end of document.ready --- 
  });
</script>





